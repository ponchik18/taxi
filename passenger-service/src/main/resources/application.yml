server:
  port: 8001
eureka:
  client:
    serviceUrl:
      defaultZone: http://localhost:8000/eureka
    fetch-registry: true
    register-with-eureka: true
spring:
  main:
    allow-bean-definition-overriding: true
  application:
    name: passenger-service
  security:
    oauth2:
      resourceserver:
        jwt:
          issuer-uri: http://localhost:8080/auth/realms/api-taxi-realm
          jwk-set-uri: ${spring.security.oauth2.resourceserver.jwt.issuer-uri}/protocol/openid-connect/certs
  datasource:
    password: password
    url: jdbc:postgresql://localhost:5432/passenger
    username: ponchik18
  jpa:
    hibernate:
      ddl-auto: validate
    properties:
      hibernate:
        dialect: org.hibernate.dialect.PostgreSQLDialect
        format_sql: true
    show-sql: true
  liquibase:
    enabled: true
    change-log: classpath:db/main-change-log.yml
  kafka:
    producer:
      bootstrap-servers: localhost:9092
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.springframework.kafka.support.serializer.JsonSerializer
      properties:
        spring:
          json:
            trusted:
              packages: "com.modsen.dto.rating, com.modsen.dto.card, com.modsen.dto.promo,com.modsen.dto.rides"
    admin:
      auto-create: true
management:
  endpoints:
    web:
      exposure:
        include: '*'
  endpoint:
    metrics:
      enabled: true
    prometheus:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true
  tracing:
    sampling:
      probability: 1.0
logging:
  pattern:
    level: '%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]'

jwt:
  auth:
    converter:
      principal-attribute:
        preferred_username
      resource-id:
        taxi-api-auth